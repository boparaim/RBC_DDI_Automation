- hosts: all
  remote_user: boparaim
  vars:
    ansible_become_pass: "{{ root_password }}"
  vars_files:
    - passwords.yaml
  tasks:
    - name: get ip information
      environment:
        PATH: "{{ hostvars[inventory_hostname]['ansible_facts']['env']['PATH'] }}:/bin:/usr/sbin"
      shell: ip a
      register: ip_information
      args:
        executable: /bin/bash

    - name: print ip information
      debug:
        var: ip_information.stdout_lines

    - name: get interface name
      environment:
        PATH: "{{ hostvars[inventory_hostname]['ansible_facts']['env']['PATH'] }}:/bin:/usr/sbin"
      shell: grep {{ hostvars[inventory_hostname]['from'] }} /etc/sysconfig/network-scripts/* | awk -F':' '{print $1}' | sed 's/.*\/ifcfg-//'
      register: interface_name
      args:
        executable: /bin/bash

    - name: print interface name
      debug:
        var: interface_name.stdout

    - name: test output printing
      shell: echo earlier we received {{ interface_name.stdout }}
      register: out2

    - name: test output print
      debug:
        var: out2.stdout

    - name: replace ip address
      replace:
        path: /etc/sysconfig/network-scripts/ifcfg-{{ interface_name.stdout }}
        regexp: IPADDR={{ hostvars[inventory_hostname]["from"] }}
        replace: IPADDR={{ hostvars[inventory_hostname]["to"] }}
      become: yes
      #notify: "interface configuration changed"
#      environment:
#        PATH: "{{ hostvars[inventory_hostname]['ansible_facts']['env']['PATH'] }}:/bin:/usr/sbin"
#      shell:  sed -i 's/IPADDR={{ hostvars[inventory_hostname]["from"] }}/IPADDR={{ hostvars[inventory_hostname]["to"] }}/' /etc/sysconfig/network-scripts/ifcfg-{{ interface_name.stdout }}
#      register: interface_name
#      args:
#        executable: /bin/bash



    - name: test async
      command: /bin/sleep 15
      async: 20
      poll: 0



    #- block:
    - name: restart network service
      become: yes
      shell: "(sleep 5 && ifdown {{ interface_name.stdout }} && ifup {{ interface_name.stdout }}) &"
      #command: service network restart
      #command: /bin/sleep 15
#      #shell: echo what ...
      async: 30
      poll: 0

      #- meta: end_play
      ignore_errors: yes
      retries: 1
      args:
        executable: /bin/bash


    - name: change ip for ansible
      set_fact:
        ansible_ssh_host: '{{ hostvars[inventory_hostname]["to"] }}'



    - name: Wait for the hosts' network interface to come back up
      local_action:
        module: wait_for
        host: "{{ ansible_ssh_host }}"
        #host: '{{ hostvars[inventory_hostname]["from"] }}'
        port: 22
        delay: 10
        state: started
      register: wait_result


    - name: refresh network facts
      setup:
        gather_subset: network



    - name: Display all variables/facts known for a host
      debug:
        var: hostvars[inventory_hostname]['ansible_facts']
        #['env']['PATH']


#  handlers:
#    # poll every 10 secs upto 30 secs
#    - name: restart network service
#      listen: "interface configuration changed"
#      async: 30
#      poll: 10
#      become: yes
#      service:
#        name: network
#        state: restarted
#
# grep 192.168.78.13 /etc/sysconfig/network-scripts/*
# get interface name
# grep 192.168.78.13 /etc/sysconfig/network-scripts/* | awk -F':' '{print $1}' | sed 's/.*\/ifcfg-//'

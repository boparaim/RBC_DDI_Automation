- name: debian - get interface name where ip address matches
  environment:
    PATH: "{{ hostvars[inventory_hostname]['ansible_facts']['env']['PATH'] }}:/bin:/usr/sbin"
  args:
    executable: /bin/bash
  shell: >
    ip -o -4 a | grep {{from}} | awk '{print $2}'
  register: interface_name

# TODO: if no interface found exit

- name: replace ip address in configuration file and apply the changes
  become: yes
  async: 60
  poll: 0
  environment:
    PATH: "{{ hostvars[inventory_hostname]['ansible_facts']['env']['PATH'] }}:/bin:/usr/sbin"
  args:
    executable: /bin/bash
  shell: >
    for file in $(ls /etc/netplan/* | grep -P '\.ya?ml$');
    do
      sed -i 's/{{from}}\//{{to}}\//g' $file;
    done && sleep 1 && netplan apply
  register: netplan_file_names

- name: change ip for ansible
  set_fact:
    ansible_ssh_host: '{{ hostvars[inventory_hostname]["to"] }}'

- name: wait for the network interface to come back up
  local_action:
    module: wait_for
    host: "{{ ansible_ssh_host }}"
    port: 22
    delay: 10
    state: started
  register: wait_result

- name: refresh network facts
  setup:
    gather_subset: network

- name: display network facts
  debug:
    var: hostvars[inventory_hostname]['ansible_facts']['all_ipv4_addresses']
